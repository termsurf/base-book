
fn main() {
  let a = String::from("Hello");
  let str_len = get_str_length(&a);
  println!("String length: {}", str_len);
}

fn get_str_length(s:&String) -> usize {
  s.len()
}

task main
  save str-len, call get-str-length, loan a
  show <String length: {str-len}>

task get-str-length
  head usize
  base s, form string
    loan seek
  turn back, call s/len

fn main() {
  let mut a = 5;
  mutate_value(&mut a);
  println!("{}", a);
}

fn mutate_value(num:&mut i32) {
  *num = 3;
}

task main
  save a, size 5
    lock free
  call mutate-value
    loan a, lock free
  show <{a}>

task mutate-value
  base num, form i32
    lock free
    loan bond
  save dive num
    size 3

head copy

fn main() {
  let a = 10;
  let b = a;
  println!("A: {}", a);
  println!("B: {}", b);
}

task main
  save a, size 10
  save b, read a
  show <A: {a}>
  show <B: {b}>

head move

fn main() {
  let a = String::from("Hello");
  let b = a;
  println!("A: {}", a);
  println!("B: {}", b);
}

task main
  save a, text <Hello>
  save b, move a
  show <A: {a}>
  show <B: {b}>

head tuples

form tuple-3
  base i0
  base i1
  base i2

make tuple-3
  bind i0, size 0
  bind i1, size 1
  bind i2, size 1

make tuple-3
  size 0
  size 1
  size 1

https://doc.rust-lang.org/book/ch13-01-closures.html

fn add_callback(acc: &mut Accumulator, dest: &mut i32) {
  let cb = move |x| { *dest = x };
  acc.register_callback(acc, &mut cb);
}

task add-callback
  base acc, form accumulator
    lock free
    loan bond
  base dest, form i32
    lock free
    loan bond

  save cb
    task
      base x, move bond
      save seek dest
        link x
  call acc/register-call
    link acc
    loan cb, lock free

task add-callback
  loan acc, form accumulator
    lock free
  loan dest, form i32
    lock free

  save cb
    task
      move x
      save seek dest
        link x
  call acc/register-call
    link acc
    loan cb, lock free

https://github.com/alshdavid/BorrowScript#language-design

time is lifetime

fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
  if x.len() > y.len() {
    x
  } else {
    y
  }
}

task longest
  time a
  loan x, form str
    time a
  loan y, form str
    time a

  call test-gt
    call x/len
    call y/len
    hook match
      turn back, link x
    hook fail
      turn back, link y

http://smallcultfollowing.com/babysteps/blog/2018/04/27/an-alias-based-formulation-of-the-borrow-checker/

By default, variables are moved instead of copied.

A variable can be moved by assigning it to another variable in one of three ways:

directly. e.g. x = y
by setting the value of a function parameter. e.g. f(x)
by returning it from a function, e.g. x = f()

You can have an unlimited number of immutable references to a variable. You can only have one mutable reference, and only if you have no other types of references (including immutable) in scope.

https://github.com/rust-lang/polonius
