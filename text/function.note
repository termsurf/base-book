# -- The sequence of numbers that begins with 0
# fib 0 = 0
# -- and 1
# fib 1 = 1
# fib n = fib (n - 1) + fib (n - 2)

# https://www.nayuki.io/res/fast-fibonacci-algorithms/fastfibonacci.hs
# -- (Public) fibonacci n = F(n)
# fibonacci :: Integer -> Integer
# fibonacci n | n >= 0 = fst (fib n)

# -- (Private) fib n = (F(n), F(n+1))
# fib :: Integer -> (Integer, Integer)
# fib 0 = (0, 1)
# fib n =
# 	let (a, b) = fib (div n 2)
# 	    c = a * (b * 2 - a)
# 	    d = a * a + b * b
# 	in if mod n 2 == 0
# 		then (c, d)
# 		else (d, c + d)

# https://stackoverflow.com/questions/1784664/what-is-the-difference-between-declarative-and-imperative-paradigm-in-programmin

task fib, take 0
  back 0

task fib, take 1
  back 1

task fib
  take n, like size
  call add
    call fib
      call sub
        loan n
        size 1
    call fib
      call sub
        loan n
        size 2
